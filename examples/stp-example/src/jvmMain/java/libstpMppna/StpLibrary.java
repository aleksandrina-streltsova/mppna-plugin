package libstpMppna;

import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.NativeLongByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.IntBuffer;
/**
 * JNA Wrapper for library <b>Stp</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface StpLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "stp";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(StpLibrary.JNA_LIBRARY_NAME);
	public static final StpLibrary INSTANCE = (StpLibrary)Native.loadLibrary(StpLibrary.JNA_LIBRARY_NAME, StpLibrary.class);
	/**
	 * !<br>
	 * <i>native declaration : c_interface.h:137</i><br>
	 * enum values
	 */
	public static interface ifaceflag_t {
		/** <i>native declaration : c_interface.h:155</i> */
		public static final int EXPRDELETE = 0;
		/** <i>native declaration : c_interface.h:159</i> */
		public static final int MS = 1;
		/** <i>native declaration : c_interface.h:163</i> */
		public static final int SMS = 2;
		/** <i>native declaration : c_interface.h:167</i> */
		public static final int CMS4 = 3;
		/** <i>native declaration : c_interface.h:171</i> */
		public static final int RISS = 4;
		/** <i>native declaration : c_interface.h:179</i> */
		public static final int MSP = 5;
	};
	/**
	 * !<br>
	 * <i>native declaration : c_interface.h:1036</i><br>
	 * enum values
	 */
	public static interface exprkind_t {
		/**
		 * !< An undefined expression.<br>
		 * <i>native declaration : c_interface.h:1038</i>
		 */
		public static final int UNDEFINED = 0;
		/**
		 * !< Named expression (or variable), i.e. created via 'vc_varExpr'.<br>
		 * <i>native declaration : c_interface.h:1039</i>
		 */
		public static final int SYMBOL = 1;
		/**
		 * !< Bitvector constant expression, i.e. created via 'vc_bvConstExprFromInt'.<br>
		 * <i>native declaration : c_interface.h:1040</i>
		 */
		public static final int BVCONST = 2;
		/**
		 * !< Bitvector bitwise-not<br>
		 * <i>native declaration : c_interface.h:1041</i>
		 */
		public static final int BVNOT = 3;
		/**
		 * !< Bitvector concatenation<br>
		 * <i>native declaration : c_interface.h:1042</i>
		 */
		public static final int BVCONCAT = 4;
		/**
		 * !< Bitvector bitwise-or<br>
		 * <i>native declaration : c_interface.h:1043</i>
		 */
		public static final int BVOR = 5;
		/**
		 * !< Bitvector bitwise-and<br>
		 * <i>native declaration : c_interface.h:1044</i>
		 */
		public static final int BVAND = 6;
		/**
		 * !< Bitvector bitwise-xor<br>
		 * <i>native declaration : c_interface.h:1045</i>
		 */
		public static final int BVXOR = 7;
		/**
		 * !< Bitvector bitwise not-and; OR nand (TODO: does this still exist?)<br>
		 * <i>native declaration : c_interface.h:1046</i>
		 */
		public static final int BVNAND = 8;
		/**
		 * !< Bitvector bitwise not-or; OR nor (TODO: does this still exist?)<br>
		 * <i>native declaration : c_interface.h:1047</i>
		 */
		public static final int BVNOR = 9;
		/**
		 * !< Bitvector bitwise not-xor; OR xnor (TODO: does this still exist?)<br>
		 * <i>native declaration : c_interface.h:1048</i>
		 */
		public static final int BVXNOR = 10;
		/**
		 * !< Bitvector extraction, i.e. via 'vc_bvExtract'.<br>
		 * <i>native declaration : c_interface.h:1049</i>
		 */
		public static final int BVEXTRACT = 11;
		/**
		 * !< Bitvector left-shift<br>
		 * <i>native declaration : c_interface.h:1050</i>
		 */
		public static final int BVLEFTSHIFT = 12;
		/**
		 * !< Bitvector right-right<br>
		 * <i>native declaration : c_interface.h:1051</i>
		 */
		public static final int BVRIGHTSHIFT = 13;
		/**
		 * !< Bitvector signed right-shift<br>
		 * <i>native declaration : c_interface.h:1052</i>
		 */
		public static final int BVSRSHIFT = 14;
		/**
		 * !< Bitvector addition<br>
		 * <i>native declaration : c_interface.h:1053</i>
		 */
		public static final int BVPLUS = 15;
		/**
		 * !< Bitvector subtraction<br>
		 * <i>native declaration : c_interface.h:1054</i>
		 */
		public static final int BVSUB = 16;
		/**
		 * !< Bitvector unary minus; OR negate expression<br>
		 * <i>native declaration : c_interface.h:1055</i>
		 */
		public static final int BVUMINUS = 17;
		/**
		 * !< Bitvector multiplication<br>
		 * <i>native declaration : c_interface.h:1056</i>
		 */
		public static final int BVMULT = 18;
		/**
		 * !< Bitvector division<br>
		 * <i>native declaration : c_interface.h:1057</i>
		 */
		public static final int BVDIV = 19;
		/**
		 * !< Bitvector modulo operation<br>
		 * <i>native declaration : c_interface.h:1058</i>
		 */
		public static final int BVMOD = 20;
		/**
		 * !< Signed bitvector division<br>
		 * <i>native declaration : c_interface.h:1059</i>
		 */
		public static final int SBVDIV = 21;
		/**
		 * !< Signed bitvector remainder<br>
		 * <i>native declaration : c_interface.h:1060</i>
		 */
		public static final int SBVREM = 22;
		/**
		 * !< Signed bitvector modulo operation<br>
		 * <i>native declaration : c_interface.h:1061</i>
		 */
		public static final int SBVMOD = 23;
		/**
		 * !< Bitvector signed extend<br>
		 * <i>native declaration : c_interface.h:1062</i>
		 */
		public static final int BVSX = 24;
		/**
		 * !< Bitvector zero extend<br>
		 * <i>native declaration : c_interface.h:1063</i>
		 */
		public static final int BVZX = 25;
		/**
		 * !< If-then-else<br>
		 * <i>native declaration : c_interface.h:1064</i>
		 */
		public static final int ITE = 26;
		/**
		 * !< Bitvector boolean extraction<br>
		 * <i>native declaration : c_interface.h:1065</i>
		 */
		public static final int BOOLEXTRACT = 27;
		/**
		 * !< Bitvector less-than<br>
		 * <i>native declaration : c_interface.h:1066</i>
		 */
		public static final int BVLT = 28;
		/**
		 * !< Bitvector less-equals<br>
		 * <i>native declaration : c_interface.h:1067</i>
		 */
		public static final int BVLE = 29;
		/**
		 * !< Bitvector greater-than<br>
		 * <i>native declaration : c_interface.h:1068</i>
		 */
		public static final int BVGT = 30;
		/**
		 * !< Bitvector greater-equals<br>
		 * <i>native declaration : c_interface.h:1069</i>
		 */
		public static final int BVGE = 31;
		/**
		 * !< Signed bitvector less-than<br>
		 * <i>native declaration : c_interface.h:1070</i>
		 */
		public static final int BVSLT = 32;
		/**
		 * !< Signed bitvector less-equals<br>
		 * <i>native declaration : c_interface.h:1071</i>
		 */
		public static final int BVSLE = 33;
		/**
		 * !< Signed bitvector greater-than<br>
		 * <i>native declaration : c_interface.h:1072</i>
		 */
		public static final int BVSGT = 34;
		/**
		 * !< Signed bitvector greater-equals<br>
		 * <i>native declaration : c_interface.h:1073</i>
		 */
		public static final int BVSGE = 35;
		/**
		 * !< Equality comparator<br>
		 * <i>native declaration : c_interface.h:1074</i>
		 */
		public static final int EQ = 36;
		/**
		 * !< Constant false boolean expression<br>
		 * <i>native declaration : c_interface.h:1075</i>
		 */
		public static final int FALSE = 37;
		/**
		 * !< Constant true boolean expression<br>
		 * <i>native declaration : c_interface.h:1076</i>
		 */
		public static final int TRUE = 38;
		/**
		 * !< Logical-not boolean expression<br>
		 * <i>native declaration : c_interface.h:1077</i>
		 */
		public static final int NOT = 39;
		/**
		 * !< Logical-and boolean expression<br>
		 * <i>native declaration : c_interface.h:1078</i>
		 */
		public static final int AND = 40;
		/**
		 * !< Logical-or boolean expression<br>
		 * <i>native declaration : c_interface.h:1079</i>
		 */
		public static final int OR = 41;
		/**
		 * !< Logical-not-and boolean expression (TODO: Does this still exist?)<br>
		 * <i>native declaration : c_interface.h:1080</i>
		 */
		public static final int NAND = 42;
		/**
		 * !< Logical-not-or boolean expression (TODO: Does this still exist?)<br>
		 * <i>native declaration : c_interface.h:1081</i>
		 */
		public static final int NOR = 43;
		/**
		 * !< Logical-xor (either-or) boolean expression<br>
		 * <i>native declaration : c_interface.h:1082</i>
		 */
		public static final int XOR = 44;
		/**
		 * !< If-and-only-if boolean expression<br>
		 * <i>native declaration : c_interface.h:1083</i>
		 */
		public static final int IFF = 45;
		/**
		 * !< Implication boolean expression<br>
		 * <i>native declaration : c_interface.h:1084</i>
		 */
		public static final int IMPLIES = 46;
		/**
		 * !< Parameterized boolean expression<br>
		 * <i>native declaration : c_interface.h:1085</i>
		 */
		public static final int PARAMBOOL = 47;
		/**
		 * !< Array read expression<br>
		 * <i>native declaration : c_interface.h:1086</i>
		 */
		public static final int READ = 48;
		/**
		 * !< Array write expression<br>
		 * <i>native declaration : c_interface.h:1087</i>
		 */
		public static final int WRITE = 49;
		/**
		 * !< Array creation expression<br>
		 * <i>native declaration : c_interface.h:1088</i>
		 */
		public static final int ARRAY = 50;
		/**
		 * !< Bitvector creation expression<br>
		 * <i>native declaration : c_interface.h:1089</i>
		 */
		public static final int BITVECTOR = 51;
		/**
		 * !< Boolean creation expression<br>
		 * <i>native declaration : c_interface.h:1090</i>
		 */
		public static final int BOOLEAN = 52;
	};
	/**
	 * !<br>
	 * <i>native declaration : c_interface.h:1107</i><br>
	 * enum values
	 */
	public static interface type_t {
		/** <i>native declaration : c_interface.h:1109</i> */
		public static final int BOOLEAN_TYPE = 0;
		/** <i>native declaration : c_interface.h:1110</i> */
		public static final int BITVECTOR_TYPE = 1;
		/** <i>native declaration : c_interface.h:1111</i> */
		public static final int ARRAY_TYPE = 2;
		/** <i>native declaration : c_interface.h:1112</i> */
		public static final int UNKNOWN_TYPE = 3;
	};
	/** <i>native declaration : c_interface.h:1004</i> */
	public interface vc_registerErrorHandler_error_hdlr_callback extends Callback {
		void apply(Pointer err_msg);
	};
	/**
	 * !<br>
	 * Original signature : <code>char* get_git_version_sha()</code><br>
	 * <i>native declaration : c_interface.h:86</i>
	 */
	String get_git_version_sha();
	/**
	 * !<br>
	 * Original signature : <code>char* get_git_version_tag()</code><br>
	 * <i>native declaration : c_interface.h:90</i>
	 */
	String get_git_version_tag();
	/**
	 * !<br>
	 * Original signature : <code>char* get_compilation_env()</code><br>
	 * <i>native declaration : c_interface.h:94</i>
	 */
	String get_compilation_env();
	/**
	 * !<br>
	 * Original signature : <code>void process_argument(const char, VC)</code><br>
	 * <i>native declaration : c_interface.h:115</i>
	 */
	void process_argument(byte ch, Pointer bm);
	/**
	 * !<br>
	 * Original signature : <code>void vc_setFlags(VC, char, int)</code><br>
	 * <i>native declaration : c_interface.h:125</i>
	 */
	void vc_setFlags(Pointer vc, byte c, int num_absrefine);
	/**
	 * !<br>
	 * Original signature : <code>void vc_setFlag(VC, char)</code><br>
	 * <i>native declaration : c_interface.h:133</i>
	 */
	void vc_setFlag(Pointer vc, byte c);
	/**
	 * !<br>
	 * Original signature : <code>void vc_setInterfaceFlags(VC, ifaceflag_t, int)</code><br>
	 * <i>native declaration : c_interface.h:188</i>
	 */
	void vc_setInterfaceFlags(Pointer vc, int f, int param_value);
	/**
	 * ! Since recent versions of STP division is always total.<br>
	 * Original signature : <code>void make_division_total(VC)</code><br>
	 * <i>native declaration : c_interface.h:194</i>
	 */
	void make_division_total(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>VC vc_createValidityChecker()</code><br>
	 * <i>native declaration : c_interface.h:203</i>
	 */
	Pointer vc_createValidityChecker();
	/**
	 * !<br>
	 * Original signature : <code>Type vc_boolType(VC)</code><br>
	 * <i>native declaration : c_interface.h:207</i>
	 */
	Pointer vc_boolType(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>Type vc_arrayType(VC, Type, Type)</code><br>
	 * <i>native declaration : c_interface.h:214</i>
	 */
	Pointer vc_arrayType(Pointer vc, Pointer typeIndex, Pointer typeData);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_varExpr(VC, const char*, Type)</code><br>
	 * <i>native declaration : c_interface.h:227</i><br>
	 * @deprecated use the safer methods {@link #vc_varExpr(com.sun.jna.Pointer, java.lang.String, com.sun.jna.Pointer)} and {@link #vc_varExpr(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer vc_varExpr(Pointer vc, Pointer name, Pointer type);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_varExpr(VC, const char*, Type)</code><br>
	 * <i>native declaration : c_interface.h:227</i>
	 */
	Pointer vc_varExpr(Pointer vc, String name, Pointer type);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_varExpr1(VC, const char*, int, int)</code><br>
	 * <i>native declaration : c_interface.h:238</i><br>
	 * @deprecated use the safer methods {@link #vc_varExpr1(com.sun.jna.Pointer, java.lang.String, int, int)} and {@link #vc_varExpr1(com.sun.jna.Pointer, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	Pointer vc_varExpr1(Pointer vc, Pointer name, int indexwidth, int valuewidth);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_varExpr1(VC, const char*, int, int)</code><br>
	 * <i>native declaration : c_interface.h:238</i>
	 */
	Pointer vc_varExpr1(Pointer vc, String name, int indexwidth, int valuewidth);
	/**
	 * !<br>
	 * Original signature : <code>Type vc_getType(VC, Expr)</code><br>
	 * <i>native declaration : c_interface.h:243</i>
	 */
	Pointer vc_getType(Pointer vc, Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>int vc_getBVLength(VC, Expr)</code><br>
	 * <i>native declaration : c_interface.h:247</i>
	 */
	int vc_getBVLength(Pointer vc, Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_eqExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:253</i>
	 */
	Pointer vc_eqExpr(Pointer vc, Pointer child0, Pointer child1);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_trueExpr(VC)</code><br>
	 * <i>native declaration : c_interface.h:270</i>
	 */
	Pointer vc_trueExpr(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_falseExpr(VC)</code><br>
	 * <i>native declaration : c_interface.h:274</i>
	 */
	Pointer vc_falseExpr(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_notExpr(VC, Expr)</code><br>
	 * <i>native declaration : c_interface.h:278</i>
	 */
	Pointer vc_notExpr(Pointer vc, Pointer child);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_andExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:283</i>
	 */
	Pointer vc_andExpr(Pointer vc, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_andExprN(VC, Expr*, int)</code><br>
	 * <i>native declaration : c_interface.h:290</i>
	 */
	Pointer vc_andExprN(Pointer vc, PointerByReference children, int numOfChildNodes);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_orExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:295</i>
	 */
	Pointer vc_orExpr(Pointer vc, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_orExprN(VC, Expr*, int)</code><br>
	 * <i>native declaration : c_interface.h:302</i>
	 */
	Pointer vc_orExprN(Pointer vc, PointerByReference children, int numOfChildNodes);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_xorExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:306</i>
	 */
	Pointer vc_xorExpr(Pointer vc, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_impliesExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:311</i>
	 */
	Pointer vc_impliesExpr(Pointer vc, Pointer hyp, Pointer conc);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_iffExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:315</i>
	 */
	Pointer vc_iffExpr(Pointer vc, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_iteExpr(VC, Expr, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:322</i>
	 */
	Pointer vc_iteExpr(Pointer vc, Pointer conditional, Pointer thenExpr, Pointer elseExpr);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_boolToBVExpr(VC, Expr)</code><br>
	 * <i>native declaration : c_interface.h:333</i>
	 */
	Pointer vc_boolToBVExpr(Pointer vc, Pointer form);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_paramBoolExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:338</i>
	 */
	Pointer vc_paramBoolExpr(Pointer vc, Pointer var, Pointer param);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_readExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:349</i>
	 */
	Pointer vc_readExpr(Pointer vc, Pointer array, Pointer index);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_writeExpr(VC, Expr, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:356</i>
	 */
	Pointer vc_writeExpr(Pointer vc, Pointer array, Pointer index, Pointer newValue);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_parseExpr(VC, const char*)</code><br>
	 * <i>native declaration : c_interface.h:365</i><br>
	 * @deprecated use the safer methods {@link #vc_parseExpr(com.sun.jna.Pointer, java.lang.String)} and {@link #vc_parseExpr(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer vc_parseExpr(Pointer vc, Pointer filepath);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_parseExpr(VC, const char*)</code><br>
	 * <i>native declaration : c_interface.h:365</i>
	 */
	Pointer vc_parseExpr(Pointer vc, String filepath);
	/**
	 * !<br>
	 * Original signature : <code>void vc_printExpr(VC, Expr)</code><br>
	 * <i>native declaration : c_interface.h:369</i>
	 */
	void vc_printExpr(Pointer vc, Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>void vc_printExprCCode(VC, Expr)</code><br>
	 * <i>native declaration : c_interface.h:373</i>
	 */
	void vc_printExprCCode(Pointer vc, Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>char* vc_printSMTLIB(VC, Expr)</code><br>
	 * <i>native declaration : c_interface.h:377</i>
	 */
	Pointer vc_printSMTLIB(Pointer vc, Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>void vc_printExprFile(VC, Expr, int)</code><br>
	 * <i>native declaration : c_interface.h:382</i>
	 */
	void vc_printExprFile(Pointer vc, Pointer e, int fd);
	/**
	 * ! It is the responsibility of the caller to free the memory afterwards.<br>
	 * Original signature : <code>void vc_printExprToBuffer(VC, Expr, char**, unsigned long*)</code><br>
	 * <i>native declaration : c_interface.h:396</i>
	 */
	void vc_printExprToBuffer(Pointer vc, Pointer e, PointerByReference buf, NativeLongByReference len);
	/**
	 * !<br>
	 * Original signature : <code>void vc_printCounterExample(VC)</code><br>
	 * <i>native declaration : c_interface.h:403</i>
	 */
	void vc_printCounterExample(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>void vc_printVarDecls(VC)</code><br>
	 * <i>native declaration : c_interface.h:407</i>
	 */
	void vc_printVarDecls(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>void vc_clearDecls(VC)</code><br>
	 * <i>native declaration : c_interface.h:416</i>
	 */
	void vc_clearDecls(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>void vc_printAsserts(VC, int)</code><br>
	 * <i>native declaration : c_interface.h:423</i>
	 */
	void vc_printAsserts(Pointer vc, int simplify_print);
	/**
	 * !<br>
	 * Original signature : <code>void vc_printQueryStateToBuffer(VC, Expr, char**, unsigned long*, int)</code><br>
	 * <i>native declaration : c_interface.h:434</i>
	 */
	void vc_printQueryStateToBuffer(Pointer vc, Pointer e, PointerByReference buf, NativeLongByReference len, int simplify_print);
	/**
	 * !<br>
	 * Original signature : <code>void vc_printCounterExampleToBuffer(VC, char**, unsigned long*)</code><br>
	 * <i>native declaration : c_interface.h:447</i>
	 */
	void vc_printCounterExampleToBuffer(Pointer vc, PointerByReference buf, NativeLongByReference len);
	/**
	 * !<br>
	 * Original signature : <code>void vc_printQuery(VC)</code><br>
	 * <i>native declaration : c_interface.h:452</i>
	 */
	void vc_printQuery(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>void vc_assertFormula(VC, Expr)</code><br>
	 * <i>native declaration : c_interface.h:462</i>
	 */
	void vc_assertFormula(Pointer vc, Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_simplify(VC, Expr)</code><br>
	 * <i>native declaration : c_interface.h:466</i>
	 */
	Pointer vc_simplify(Pointer vc, Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>int vc_query_with_timeout(VC, Expr, int, int)</code><br>
	 * <i>native declaration : c_interface.h:482</i>
	 */
	int vc_query_with_timeout(Pointer vc, Pointer e, int timeout_max_conflicts, int timeout_max_time);
	/**
	 * !<br>
	 * Original signature : <code>int vc_query(VC, Expr)</code><br>
	 * <i>native declaration : c_interface.h:492</i>
	 */
	int vc_query(Pointer vc, Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_getCounterExample(VC, Expr)</code><br>
	 * <i>native declaration : c_interface.h:496</i>
	 */
	Pointer vc_getCounterExample(Pointer vc, Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>void vc_getCounterExampleArray(VC, Expr, Expr**, Expr**, int*)</code><br>
	 * <i>native declaration : c_interface.h:506</i><br>
	 * @deprecated use the safer methods {@link #vc_getCounterExampleArray(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer)} and {@link #vc_getCounterExampleArray(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	void vc_getCounterExampleArray(Pointer vc, Pointer e, PointerByReference outIndices, PointerByReference outValues, IntByReference outSize);
	/**
	 * !<br>
	 * Original signature : <code>void vc_getCounterExampleArray(VC, Expr, Expr**, Expr**, int*)</code><br>
	 * <i>native declaration : c_interface.h:506</i>
	 */
	void vc_getCounterExampleArray(Pointer vc, Pointer e, PointerByReference outIndices, PointerByReference outValues, IntBuffer outSize);
	/**
	 * !<br>
	 * Original signature : <code>int vc_counterexample_size(VC)</code><br>
	 * <i>native declaration : c_interface.h:513</i>
	 */
	int vc_counterexample_size(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>void vc_push(VC)</code><br>
	 * <i>native declaration : c_interface.h:519</i>
	 */
	void vc_push(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>void vc_pop(VC)</code><br>
	 * <i>native declaration : c_interface.h:525</i>
	 */
	void vc_pop(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>int getBVInt(Expr)</code><br>
	 * <i>native declaration : c_interface.h:531</i>
	 */
	int getBVInt(Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>int getBVUnsigned(Expr)</code><br>
	 * <i>native declaration : c_interface.h:537</i>
	 */
	int getBVUnsigned(Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>long long long getBVUnsignedLongLong(Expr)</code><br>
	 * <i>native declaration : c_interface.h:545</i>
	 */
	long getBVUnsignedLongLong(Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>void vc_printBVBitStringToBuffer(Expr, char**, unsigned long*)</code><br>
	 * <i>native declaration : c_interface.h:553</i>
	 */
	void vc_printBVBitStringToBuffer(Pointer e, PointerByReference buf, NativeLongByReference len);
	/**
	 * !<br>
	 * Original signature : <code>Type vc_bvType(VC, int)</code><br>
	 * <i>native declaration : c_interface.h:561</i>
	 */
	Pointer vc_bvType(Pointer vc, int no_bits);
	/**
	 * !<br>
	 * Original signature : <code>Type vc_bv32Type(VC)</code><br>
	 * <i>native declaration : c_interface.h:570</i>
	 */
	Pointer vc_bv32Type(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvConstExprFromDecStr(VC, int, const char*)</code><br>
	 * <i>native declaration : c_interface.h:578</i><br>
	 * @deprecated use the safer methods {@link #vc_bvConstExprFromDecStr(com.sun.jna.Pointer, int, java.lang.String)} and {@link #vc_bvConstExprFromDecStr(com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer vc_bvConstExprFromDecStr(Pointer vc, int width, Pointer decimalInput);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvConstExprFromDecStr(VC, int, const char*)</code><br>
	 * <i>native declaration : c_interface.h:578</i>
	 */
	Pointer vc_bvConstExprFromDecStr(Pointer vc, int width, String decimalInput);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvConstExprFromStr(VC, const char*)</code><br>
	 * <i>native declaration : c_interface.h:585</i><br>
	 * @deprecated use the safer methods {@link #vc_bvConstExprFromStr(com.sun.jna.Pointer, java.lang.String)} and {@link #vc_bvConstExprFromStr(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer vc_bvConstExprFromStr(Pointer vc, Pointer binaryInput);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvConstExprFromStr(VC, const char*)</code><br>
	 * <i>native declaration : c_interface.h:585</i>
	 */
	Pointer vc_bvConstExprFromStr(Pointer vc, String binaryInput);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvConstExprFromInt(VC, int, unsigned int)</code><br>
	 * <i>native declaration : c_interface.h:592</i>
	 */
	Pointer vc_bvConstExprFromInt(Pointer vc, int bitWidth, int value);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvConstExprFromLL(VC, int, unsigned long long)</code><br>
	 * <i>native declaration : c_interface.h:599</i>
	 */
	Pointer vc_bvConstExprFromLL(Pointer vc, int bitWidth, long value);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bv32ConstExprFromInt(VC, unsigned int)</code><br>
	 * <i>native declaration : c_interface.h:605</i>
	 */
	Pointer vc_bv32ConstExprFromInt(Pointer vc, int value);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvConcatExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:620</i>
	 */
	Pointer vc_bvConcatExpr(Pointer vc, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvPlusExpr(VC, int, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:627</i>
	 */
	Pointer vc_bvPlusExpr(Pointer vc, int bitWidth, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvPlusExprN(VC, int, Expr*, int)</code><br>
	 * <i>native declaration : c_interface.h:634</i>
	 */
	Pointer vc_bvPlusExprN(Pointer vc, int bitWidth, PointerByReference children, int numOfChildNodes);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bv32PlusExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:642</i>
	 */
	Pointer vc_bv32PlusExpr(Pointer vc, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvMinusExpr(VC, int, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:650</i>
	 */
	Pointer vc_bvMinusExpr(Pointer vc, int bitWidth, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bv32MinusExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:658</i>
	 */
	Pointer vc_bv32MinusExpr(Pointer vc, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvMultExpr(VC, int, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:666</i>
	 */
	Pointer vc_bvMultExpr(Pointer vc, int bitWidth, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bv32MultExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:674</i>
	 */
	Pointer vc_bv32MultExpr(Pointer vc, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvDivExpr(VC, int, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:682</i>
	 */
	Pointer vc_bvDivExpr(Pointer vc, int bitWidth, Pointer dividend, Pointer divisor);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvModExpr(VC, int, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:690</i>
	 */
	Pointer vc_bvModExpr(Pointer vc, int bitWidth, Pointer dividend, Pointer divisor);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvRemExpr(VC, int, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:698</i>
	 */
	Pointer vc_bvRemExpr(Pointer vc, int bitWidth, Pointer dividend, Pointer divisor);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_sbvDivExpr(VC, int, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:706</i>
	 */
	Pointer vc_sbvDivExpr(Pointer vc, int bitWidth, Pointer dividend, Pointer divisor);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_sbvModExpr(VC, int, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:714</i>
	 */
	Pointer vc_sbvModExpr(Pointer vc, int bitWidth, Pointer dividend, Pointer divisor);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_sbvRemExpr(VC, int, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:722</i>
	 */
	Pointer vc_sbvRemExpr(Pointer vc, int bitWidth, Pointer dividend, Pointer divisor);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvLtExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:731</i>
	 */
	Pointer vc_bvLtExpr(Pointer vc, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvLeExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:736</i>
	 */
	Pointer vc_bvLeExpr(Pointer vc, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvGtExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:741</i>
	 */
	Pointer vc_bvGtExpr(Pointer vc, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvGeExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:746</i>
	 */
	Pointer vc_bvGeExpr(Pointer vc, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_sbvLtExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:751</i>
	 */
	Pointer vc_sbvLtExpr(Pointer vc, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_sbvLeExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:756</i>
	 */
	Pointer vc_sbvLeExpr(Pointer vc, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_sbvGtExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:761</i>
	 */
	Pointer vc_sbvGtExpr(Pointer vc, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_sbvGeExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:766</i>
	 */
	Pointer vc_sbvGeExpr(Pointer vc, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvUMinusExpr(VC, Expr)</code><br>
	 * <i>native declaration : c_interface.h:775</i>
	 */
	Pointer vc_bvUMinusExpr(Pointer vc, Pointer child);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvAndExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:782</i>
	 */
	Pointer vc_bvAndExpr(Pointer vc, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvOrExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:789</i>
	 */
	Pointer vc_bvOrExpr(Pointer vc, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvXorExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:796</i>
	 */
	Pointer vc_bvXorExpr(Pointer vc, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvNotExpr(VC, Expr)</code><br>
	 * <i>native declaration : c_interface.h:803</i>
	 */
	Pointer vc_bvNotExpr(Pointer vc, Pointer child);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvLeftShiftExprExpr(VC, int, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:815</i>
	 */
	Pointer vc_bvLeftShiftExprExpr(Pointer vc, int bitWidth, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvRightShiftExprExpr(VC, int, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:824</i>
	 */
	Pointer vc_bvRightShiftExprExpr(Pointer vc, int bitWidth, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvSignedRightShiftExprExpr(VC, int, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:833</i>
	 */
	Pointer vc_bvSignedRightShiftExprExpr(Pointer vc, int bitWidth, Pointer left, Pointer right);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvLeftShiftExpr(VC, int, Expr)</code><br>
	 * <i>native declaration : c_interface.h:843</i>
	 */
	Pointer vc_bvLeftShiftExpr(Pointer vc, int sh_amt, Pointer child);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvRightShiftExpr(VC, int, Expr)</code><br>
	 * <i>native declaration : c_interface.h:852</i>
	 */
	Pointer vc_bvRightShiftExpr(Pointer vc, int sh_amt, Pointer child);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bv32LeftShiftExpr(VC, int, Expr)</code><br>
	 * <i>native declaration : c_interface.h:862</i>
	 */
	Pointer vc_bv32LeftShiftExpr(Pointer vc, int sh_amt, Pointer child);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bv32RightShiftExpr(VC, int, Expr)</code><br>
	 * <i>native declaration : c_interface.h:872</i>
	 */
	Pointer vc_bv32RightShiftExpr(Pointer vc, int sh_amt, Pointer child);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvVar32LeftShiftExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:882</i>
	 */
	Pointer vc_bvVar32LeftShiftExpr(Pointer vc, Pointer sh_amt, Pointer child);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvVar32RightShiftExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:892</i>
	 */
	Pointer vc_bvVar32RightShiftExpr(Pointer vc, Pointer sh_amt, Pointer child);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvVar32DivByPowOfTwoExpr(VC, Expr, Expr)</code><br>
	 * <i>native declaration : c_interface.h:902</i>
	 */
	Pointer vc_bvVar32DivByPowOfTwoExpr(Pointer vc, Pointer child, Pointer rhs);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvExtract(VC, Expr, int, int)</code><br>
	 * <i>native declaration : c_interface.h:913</i>
	 */
	Pointer vc_bvExtract(Pointer vc, Pointer child, int high_bit_no, int low_bit_no);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvBoolExtract(VC, Expr, int)</code><br>
	 * <i>native declaration : c_interface.h:923</i>
	 */
	Pointer vc_bvBoolExtract(Pointer vc, Pointer x, int bit_no);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvBoolExtract_Zero(VC, Expr, int)</code><br>
	 * <i>native declaration : c_interface.h:928</i>
	 */
	Pointer vc_bvBoolExtract_Zero(Pointer vc, Pointer x, int bit_no);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvBoolExtract_One(VC, Expr, int)</code><br>
	 * <i>native declaration : c_interface.h:933</i>
	 */
	Pointer vc_bvBoolExtract_One(Pointer vc, Pointer x, int bit_no);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvSignExtend(VC, Expr, int)</code><br>
	 * <i>native declaration : c_interface.h:940</i>
	 */
	Pointer vc_bvSignExtend(Pointer vc, Pointer child, int newWidth);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvCreateMemoryArray(VC, const char*)</code><br>
	 * <i>native declaration : c_interface.h:951</i><br>
	 * @deprecated use the safer methods {@link #vc_bvCreateMemoryArray(com.sun.jna.Pointer, java.lang.String)} and {@link #vc_bvCreateMemoryArray(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer vc_bvCreateMemoryArray(Pointer vc, Pointer arrayName);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvCreateMemoryArray(VC, const char*)</code><br>
	 * <i>native declaration : c_interface.h:951</i>
	 */
	Pointer vc_bvCreateMemoryArray(Pointer vc, String arrayName);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvReadMemoryArray(VC, Expr, Expr, int)</code><br>
	 * <i>native declaration : c_interface.h:958</i>
	 */
	Pointer vc_bvReadMemoryArray(Pointer vc, Pointer array, Pointer byteIndex, int numOfBytes);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_bvWriteToMemoryArray(VC, Expr, Expr, Expr, int)</code><br>
	 * <i>native declaration : c_interface.h:964</i>
	 */
	Pointer vc_bvWriteToMemoryArray(Pointer vc, Pointer array, Pointer byteIndex, Pointer element, int numOfBytes);
	/**
	 * !<br>
	 * Original signature : <code>char* exprString(Expr)</code><br>
	 * <i>native declaration : c_interface.h:977</i>
	 */
	Pointer exprString(Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>char* typeString(Type)</code><br>
	 * <i>native declaration : c_interface.h:985</i>
	 */
	Pointer typeString(Pointer t);
	/**
	 * !<br>
	 * Original signature : <code>Expr getChild(Expr, int)</code><br>
	 * <i>native declaration : c_interface.h:989</i>
	 */
	Pointer getChild(Pointer e, int n);
	/**
	 * !<br>
	 * Original signature : <code>int vc_isBool(Expr)</code><br>
	 * <i>native declaration : c_interface.h:998</i>
	 */
	int vc_isBool(Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>void vc_registerErrorHandler(vc_registerErrorHandler_error_hdlr_callback*)</code><br>
	 * <i>native declaration : c_interface.h:1003</i>
	 */
	void vc_registerErrorHandler(StpLibrary.vc_registerErrorHandler_error_hdlr_callback error_hdlr);
	/**
	 * !<br>
	 * Original signature : <code>int vc_getHashQueryStateToBuffer(VC, Expr)</code><br>
	 * <i>native declaration : c_interface.h:1008</i>
	 */
	int vc_getHashQueryStateToBuffer(Pointer vc, Pointer query);
	/**
	 * !<br>
	 * Original signature : <code>void vc_Destroy(VC)</code><br>
	 * <i>native declaration : c_interface.h:1015</i>
	 */
	void vc_Destroy(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>void vc_DeleteExpr(Expr)</code><br>
	 * <i>native declaration : c_interface.h:1019</i>
	 */
	void vc_DeleteExpr(Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>WholeCounterExample vc_getWholeCounterExample(VC)</code><br>
	 * <i>native declaration : c_interface.h:1023</i>
	 */
	Pointer vc_getWholeCounterExample(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>Expr vc_getTermFromCounterExample(VC, Expr, WholeCounterExample)</code><br>
	 * <i>native declaration : c_interface.h:1027</i>
	 */
	Pointer vc_getTermFromCounterExample(Pointer vc, Pointer e, Pointer c);
	/**
	 * !<br>
	 * Original signature : <code>void vc_deleteWholeCounterExample(WholeCounterExample)</code><br>
	 * <i>native declaration : c_interface.h:1032</i>
	 */
	void vc_deleteWholeCounterExample(Pointer cc);
	/**
	 * !<br>
	 * Original signature : <code>exprkind_t getExprKind(Expr)</code><br>
	 * <i>native declaration : c_interface.h:1095</i>
	 */
	int getExprKind(Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>int getDegree(Expr)</code><br>
	 * <i>native declaration : c_interface.h:1099</i>
	 */
	int getDegree(Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>int getBVLength(Expr)</code><br>
	 * <i>native declaration : c_interface.h:1103</i>
	 */
	int getBVLength(Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>type_t getType(Expr)</code><br>
	 * <i>native declaration : c_interface.h:1117</i>
	 */
	int getType(Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>int getVWidth(Expr)</code><br>
	 * <i>native declaration : c_interface.h:1125</i>
	 */
	int getVWidth(Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>int getIWidth(Expr)</code><br>
	 * <i>native declaration : c_interface.h:1131</i>
	 */
	int getIWidth(Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>void vc_printCounterExampleFile(VC, int)</code><br>
	 * <i>native declaration : c_interface.h:1136</i>
	 */
	void vc_printCounterExampleFile(Pointer vc, int fd);
	/**
	 * !<br>
	 * Original signature : <code>char* exprName(Expr)</code><br>
	 * <i>native declaration : c_interface.h:1140</i>
	 */
	String exprName(Pointer e);
	/**
	 * !<br>
	 * Original signature : <code>int getExprID(Expr)</code><br>
	 * <i>native declaration : c_interface.h:1144</i>
	 */
	int getExprID(Pointer ex);
	/**
	 * !<br>
	 * Original signature : <code>int vc_parseMemExpr(VC, const char*, Expr*, Expr*)</code><br>
	 * <i>native declaration : c_interface.h:1156</i><br>
	 * @deprecated use the safer methods {@link #vc_parseMemExpr(com.sun.jna.Pointer, java.lang.String, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #vc_parseMemExpr(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int vc_parseMemExpr(Pointer vc, Pointer s, PointerByReference outQuery, PointerByReference outAsserts);
	/**
	 * !<br>
	 * Original signature : <code>int vc_parseMemExpr(VC, const char*, Expr*, Expr*)</code><br>
	 * <i>native declaration : c_interface.h:1156</i>
	 */
	int vc_parseMemExpr(Pointer vc, String s, PointerByReference outQuery, PointerByReference outAsserts);
	/**
	 * !<br>
	 * Original signature : <code>bool vc_supportsMinisat(VC)</code><br>
	 * <i>native declaration : c_interface.h:1164</i>
	 */
	byte vc_supportsMinisat(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>bool vc_useMinisat(VC)</code><br>
	 * <i>native declaration : c_interface.h:1168</i>
	 */
	byte vc_useMinisat(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>bool vc_isUsingMinisat(VC)</code><br>
	 * <i>native declaration : c_interface.h:1172</i>
	 */
	byte vc_isUsingMinisat(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>bool vc_supportsSimplifyingMinisat(VC)</code><br>
	 * <i>native declaration : c_interface.h:1179</i>
	 */
	byte vc_supportsSimplifyingMinisat(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>bool vc_useSimplifyingMinisat(VC)</code><br>
	 * <i>native declaration : c_interface.h:1183</i>
	 */
	byte vc_useSimplifyingMinisat(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>bool vc_isUsingSimplifyingMinisat(VC)</code><br>
	 * <i>native declaration : c_interface.h:1187</i>
	 */
	byte vc_isUsingSimplifyingMinisat(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>bool vc_supportsCryptominisat(VC)</code><br>
	 * <i>native declaration : c_interface.h:1191</i>
	 */
	byte vc_supportsCryptominisat(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>bool vc_useCryptominisat(VC)</code><br>
	 * <i>native declaration : c_interface.h:1195</i>
	 */
	byte vc_useCryptominisat(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>bool vc_isUsingCryptominisat(VC)</code><br>
	 * <i>native declaration : c_interface.h:1199</i>
	 */
	byte vc_isUsingCryptominisat(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>bool vc_supportsRiss(VC)</code><br>
	 * <i>native declaration : c_interface.h:1203</i>
	 */
	byte vc_supportsRiss(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>bool vc_useRiss(VC)</code><br>
	 * <i>native declaration : c_interface.h:1207</i>
	 */
	byte vc_useRiss(Pointer vc);
	/**
	 * !<br>
	 * Original signature : <code>bool vc_isUsingRiss(VC)</code><br>
	 * <i>native declaration : c_interface.h:1211</i>
	 */
	byte vc_isUsingRiss(Pointer vc);
}
